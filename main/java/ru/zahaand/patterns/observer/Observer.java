package ru.zahaand.patterns.observer;

/**
 * <h1>Паттерн Observer. Наблюдатель</h1>
 * Интерфейс {@code Observer} является частью реализации паттерна "Observer" (Observer).
 * Он определяет поведение наблюдателя, который реагирует на изменения состояния субъекта.
 * Паттерн "Observer" позволяет динамически связывать объекты и реагировать на изменения состояния других объектов.
 *
 * <p>Наблюдатели подписываются на субъект и реагируют на его события, например, получают уведомления о новостях.
 * Паттерн "Observer" обеспечивает механизм подписки-получения уведомлений, что позволяет динамически связывать объекты и реагировать на изменения состояния других объектов.
 *
 * <h3>Паттерн "Observer" обеспечивает следующие основные преимущества:</h3>
 * <ul>
 *     <li><strong>Динамическая связь</strong>: Позволяет динамически добавлять и удалять наблюдателей, что увеличивает гибкость системы.</li>
 *     <li><strong>Изоляция изменений</strong>: Изменения в состоянии субъекта автоматически распространяются среди всех подписанных наблюдателей, что упрощает управление состоянием.</li>
 *     <li><strong>Разделение ответственности</strong>: Отделяет логику изменения состояния субъекта от логики обработки изменений наблюдателями.</li>
 * </ul>
 *
 * <h3>Паттерн "Observer" целесообразно применять в следующих ситуациях:</h3>
 * <ul>
 *     <li><strong>Когда необходимо реализовать систему оповещений</strong>: Когда система должна уведомлять другие компоненты о значимых изменениях состояния.</li>
 *     <li><strong>Когда необходимо разделить логику изменения состояния от логики обработки изменений</strong>: Когда изменения состояния должны автоматически приводить к действиям в других частях системы.</li>
 *     <li><strong>Когда требуется высокая степень модульности и гибкости</strong>: Когда система должна легко масштабироваться и поддерживаться, с возможностью добавления новых типов наблюдателей и субъектов.</li>
 * </ul>
 *
 * <h3>Пример использования:</h3>
 * <pre>
 *     User user = new User(...);
 *     NewsFeedPublisher publisher = new NewsFeedPublisher();
 *
 *     publisher.subscribe(user); // Подписываем пользователя на новости
 *     publisher.publishNews("Breaking news!"); // Публикуем новость
 *
 * </pre>
 * <p>
 * В этом примере пользователь подписывается на новостной канал и получает уведомление о новости.
 * Это демонстрирует, как паттерн Observer позволяет реализовать систему оповещений,
 * где изменения состояния одного объекта автоматически приводят к реакции другого объекта.
 *
 * @see Observer
 * @see NewsFeedPublisher
 */
public interface Observer {

    /**
     * Метод {@code updateNews} вызывается у каждого наблюдателя (пользователя), подписанного на новостной канал,
     * когда происходит публикация новости.
     * Этот метод позволяет реализовать логику обработки новости внутри каждого наблюдателя.
     * <p>
     * В контексте паттерна Observer, этот метод является частью интерфейса {@link Observer},
     * который должен быть реализован каждым наблюдателем.
     */
    void updateNews(String message);

}
