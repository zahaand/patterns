package ru.zahaand.patterns.observer;

/**
 * <h1>Паттерн Observer. Субъект</h1>
 * Интерфейс {@code Subject} представляет собой центральную точку взаимодействия между наблюдателями и субъектом.
 * Он позволяет наблюдателям подписываться на события, происходящие в субъекте, и получать уведомления о них.
 * Паттерн Observer обеспечивает механизм подписки-получения уведомлений,
 * что позволяет динамически связывать объекты и реагировать на изменения состояния других объектов.
 *
 * <p>Субъект может иметь множество наблюдателей, которые могут быть добавлены или удалены во время выполнения программы.
 * При изменении состояния субъекта он автоматически уведомляет всех своих наблюдателей.
 *
 * <h3>Основные компоненты паттерна Observer:</h3>
 * <ul>
 *     <li><strong>Субъект ({@link Subject})</strong>: Объект, который содержит состояние и методы для управления наблюдателями.</li>
 *     <li><strong>Наблюдатель ({@link Observer})</strong>: Объект, который реагирует на изменения состояния субъекта.</li>
 * </ul>
 *
 * <h3>Пример использования:</h3>
 * <pre>
 *     User user = new User(...);
 *     NewsFeedPublisher publisher = new NewsFeedPublisher();
 *
 *     publisher.subscribe(user); // Подписываем пользователя на новости
 *     publisher.publishNews("Breaking news!"); // Публикуем новость
 *
 * </pre>
 * <p>
 * В этом примере пользователь подписывается на новостной канал и получает уведомление о новости.
 * Это демонстрирует, как паттерн Observer позволяет реализовать систему оповещений,
 * где изменения состояния одного объекта автоматически приводят к реакции другого объекта.
 *
 * @see Observer
 * @see NewsFeedPublisher
 */
interface Subject {

    void subscribe(Observer observer);

    void unsubscribe(Observer observer);

    void publishNews(String message);
}
