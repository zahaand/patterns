package ru.zahaand.patterns.mediator;

import ru.zahaand.patterns.domain.User;

/**
 * <h1>Паттерн Mediator. Посредник</h1>
 * Интерфейс {@code MessageMediator} является частью реализации паттерна "Посредник".
 * Он определяет методы для регистрации пользователей и отправки сообщений между ними через посредника,
 * что позволяет избежать прямого взаимодействия между объектами пользователей.
 *
 * <p>Паттерн "Посредник" используется для уменьшения зависимости между классами, которые взаимодействуют друг с другом.
 * Вместо того чтобы классы взаимодействовали напрямую, они делают это через посредника, что позволяет изменять поведение взаимодействия,
 * не изменяя сами классы.
 *
 * <h3>Паттерн "Посредник" обеспечивает следующие основные преимущества:</h3>
 * <ul>
 *     <li><strong>Уменьшение зависимости</strong>: Классы не зависят друг от друга напрямую, что упрощает изменение и расширение системы.</li>
 *     <li><strong>Централизация управления</strong>: Логика взаимодействия между классами находится в одном месте, что облегчает управление и модификацию этой логики.</li>
 *     <li><strong>Упрощение коммуникации</strong>: Посредник может управлять сложными процессами взаимодействия между множеством объектов.</li>
 * </ul>
 *
 * <h3>Паттерн "Посредник" целесообразно применять в следующих ситуациях:</h3>
 * <ul>
 *     <li><strong>Когда система состоит из множества классов, которые взаимодействуют друг с другом</strong>: Если взаимодействие между классами становится слишком сложным, использование посредника может помочь упростить структуру системы.</li>
 *     <li><strong>Когда необходимо обеспечить гибкость в изменении взаимодействий между классами</strong>: Паттерн позволяет легко добавлять новые типы взаимодействий или изменять существующие без изменения самих классов.</li>
 *     <li><strong>Когда нужно уменьшить зависимости между классами для облегчения их повторного использования</strong>: Использование посредника позволяет классам быть менее зависимыми друг от друга, что упрощает их повторное использование в других частях программы или даже в других программах.</li>
 * </ul>
 *
 * <h3>Пример использования:</h3>
 * <pre>
 *     MessageMediator mediator = new ChatMediator();
 *
 *     User sender = new User();
 *     User receiver = new User();
 *
 *     mediator.registerUser(sender);
 *     mediator.registerUser(receiver);
 *
 *     mediator.sendMessage(sender, receiver, "Привет!");
 * </pre>
 * <p>
 * В этом примере создается посредник для чата, который регистрирует пользователей и управляет отправкой сообщений между ними.
 * Это демонстрирует, как паттерн "Посредник" может быть использован для централизации управления взаимодействием между объектами в системе.
 */
public interface MessageMediator {

    void registerUser(User user);

    void sendMessage(User sender, User receiver, String message);
}
