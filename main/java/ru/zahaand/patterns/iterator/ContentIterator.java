package ru.zahaand.patterns.iterator;

import ru.zahaand.patterns.domain.Content;

/**
 * <h1>Паттерн Iterator. Итератор</h1>
 * Интерфейс {@code ContentIterator} является частью реализации паттерна "Итератор".
 * Он предоставляет способ последовательного доступа ко всем элементам агрегата без раскрытия деталей его реализации.
 * Паттерн "Итератор" позволяет обходить структуры данных, не раскрывая их внутреннего устройства.
 *
 * <p>Паттерн "Итератор" предоставляет единый интерфейс для различных структур данных,
 * позволяя клиентам работать с различными структурами данных одинаково, используя один и тот же код.
 * Это упрощает работу с коллекциями и повышает удобство их использования.
 *
 * <h3>Паттерн "Итератор" обеспечивает следующие основные преимущества:</h3>
 * <ul>
 *     <li><strong>Инкапсуляция</strong>: Скрывает детали реализации структуры данных от клиента.</li>
 *     <li><strong>Универсальность</strong>: Позволяет использовать один и тот же интерфейс для работы с различными структурами данных.</li>
 *     <li><strong>Модульность</strong>: Упрощает добавление новых типов структур данных, не изменяя существующий код.</li>
 * </ul>
 *
 * <h3>Паттерн "Итератор" целесообразно применять в следующих ситуациях:</h3>
 * <ul>
 *     <li><strong>Когда необходимо обеспечить последовательный доступ к элементам структуры данных</strong>: Если клиенту нужно обойти все элементы коллекции по одному, то паттерн "Итератор" предоставляет удобный способ это сделать.</li>
 *     <li><strong>Когда клиенту необходимо работать с различными типами структур данных</strong>: Если приложение работает с разнообразными коллекциями и требуется единый интерфейс для их обхода, то паттерн "Итератор" позволяет реализовать такую универсальность.</li>
 *     <li><strong>Когда необходимо скрыть детали реализации структуры данных от клиента</strong>: Если важно изолировать внутреннюю реализацию коллекций от клиентского кода, чтобы избежать его зависимости от конкретных классов коллекций, то паттерн "Итератор" помогает достичь этой цели.</li>
 * </ul>
 *
 * <h3>Пример использования:</h3>
 * <pre>
 *     List&lt;Content&gt; contents = new ArrayList&lt;&gt;();
 *     contents.add(new TextContent("Sample text", user));
 *     contents.add(new ImageContent(ImageFormat.JPEG, "encodedImage", user));
 *
 *     ContentIterator contentIterator = new ContentListIterator(contents);
 *
 *     while (contentIterator.hasNext()) {
 *         Content content = contentIterator.next();
 *     }
 * </pre>
 * <p>
 * В этом примере создается список объектов {@code Content}, который затем перебирается с помощью итератора {@code ContentListIterator}.
 * Это демонстрирует, как паттерн "Итератор" позволяет организовать удобный и безопасный обход коллекций различных типов.
 */
public interface ContentIterator {

    boolean hasNext();

    Content next();
}
