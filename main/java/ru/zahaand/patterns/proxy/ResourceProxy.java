package ru.zahaand.patterns.proxy;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;
import ru.zahaand.patterns.domain.Content;
import ru.zahaand.patterns.model.Resource;

/**
 * <h1>Паттерн Proxy. Прокси</h1>
 * Класс {@code ResourceProxy} реализует паттерн Proxy для контроля доступа к ресурсам.
 * Он предоставляет механизм для безопасного и контролируемого доступа к реальным ресурсам,
 * добавляя дополнительную логику проверки доступа перед обращением к ним.
 *
 * <p>Паттерн Proxy позволяет инкапсулировать сложную логику доступа к ресурсам,
 * предоставляя простой и удобный интерфейс для клиентов, которые используют эти ресурсы.
 * Это позволяет скрыть детали реализации доступа к ресурсам и обеспечивать дополнительный уровень безопасности.
 *
 * <h3>Паттерн Proxy обеспечивает следующие основные преимущества:</h3>
 * <ul>
 *     <li><strong>Безопасность</strong>: Паттерн Proxy позволяет контролировать доступ к ресурсам,
 *     добавляя дополнительные проверки безопасности перед их использованием.</li>
 *     <li><strong>Изоляция изменений</strong>: Изменения в реализации доступа к ресурсам могут быть внесены без влияния на клиентов,
 *     которые используют Proxy.</li>
 *     <li><strong>Оптимизация производительности</strong>: Паттерн Proxy может кэшировать результаты запросов к ресурсам,
 *     что улучшает производительность при многократном обращении к одним и тем же ресурсам.</li>
 * </ul>
 *
 * <h3>Паттерн Proxy целесообразно применять в следующих ситуациях:</h3>
 * <ul>
 *     <li><strong>Когда требуется контроль над доступом к ресурсам</strong>:
 *     Если доступ к ресурсам должен быть ограничен или контролируем, например, для защиты от несанкционированного доступа.</li>
 *     <li><strong>Когда ресурс требует ресурсоемкой инициализации</strong>:
 *     Если доступ к ресурсу требует значительных усилий для его инициализации, Proxy может кэшировать результаты инициализации,
 *     чтобы избежать повторной инициализации при последующих обращениях.</li>
 *     <li><strong>Когда необходимо инкапсулировать сложную логику доступа</strong>:
 *     Если доступ к ресурсу требует сложной логики, такой как аутентификация, авторизация или обработка исключений,
 *     Proxy может скрыть эту сложность от клиентов.</li>
 * </ul>
 *
 * <h3>Пример использования:</h3>
 * <pre>
 *     String content = proxyResource.loadContent();
 * </pre>
 * <p>
 * В этом примере создается объект {@code ResourceProxy}, который действует как прокси для доступа к реальному ресурсу.
 * Перед обращением к содержимому ресурса через прокси происходит проверка доступа, что демонстрирует принцип работы паттерна Proxy.
 */
@Slf4j
@Component
public class ResourceProxy extends Resource {

    private final Resource realResource;

    public ResourceProxy(@Qualifier("realResourceImpl") Resource realResource) {
        this.realResource = realResource;
    }

    @Override
    public Content loadContent() {
        log.info("Content LOADING... via proxy");
        checkAccess();
        return realResource.loadContent();
    }

    private void checkAccess() {
        log.info("Access CHECKING...");
    }
}
